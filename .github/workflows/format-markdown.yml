permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      text:
        description: 'Testo da formattare'
        required: true
        type: string
      style:
        description: 'Stile di formattazione'
        required: true
        default: 'social'
        type: choice
        options:
          - social
          - technical
          - blog

jobs:
  format:
    runs-on: ubuntu-latest
    outputs:
      result_path: ${{ steps.save_result.outputs.result_path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Format Markdown
        id: format
        env:
          GITHUB_TOKEN: ${{ secrets.MY_PERSONAL_TOKEN }}
        run: |
          # Installa dipendenze
          npm install openai
          
          # Crea file con il testo di input usando heredoc per evitare problemi con caratteri speciali
          cat > input.txt << 'EOF'
          ${{ github.event.inputs.text }}
          EOF
          
          # Script per formattare
          node -e "
          const OpenAI = require('openai');
          const fs = require('fs');
          
          async function formatText() {
            try {
              const text = fs.readFileSync('input.txt', 'utf8');
              const style = '${{ github.event.inputs.style }}';
              
              console.log('Testo caricato, lunghezza:', text.length);
              console.log('Stile selezionato:', style);
              
              const endpoint = 'https://models.github.ai/inference/';
              const modelName = 'openai/gpt-4o-mini';
              
              console.log('Connessione al servizio API...');
              
              const client = new OpenAI({ 
                baseURL: endpoint, 
                apiKey: process.env.GITHUB_TOKEN
              });
              
              let systemPrompt = 'You are a helpful assistant specialized in Markdown formatting.';
              if (style === 'social') {
                systemPrompt += ' Format for social media with engaging style.';
              } else if (style === 'technical') {
                systemPrompt += ' Format as technical documentation with proper headers and code blocks.';
              } else {
                systemPrompt += ' Format as a blog post with engaging headings and structure.';
              }
              
              console.log('Inviando richiesta all\\'API...');
              
              const completion = await client.chat.completions.create({
                messages: [
                  { role: 'system', content: systemPrompt },
                  { role: 'user', content: 'Transform this text into beautiful, well-formatted Markdown: ' + text }
                ],
                model: modelName
              });
              
              console.log('Risposta ricevuta dall\\'API');
              
              if (completion && completion.choices && completion.choices.length > 0) {
                const result = completion.choices[0].message.content;
                console.log('Contenuto della risposta ricevuto, lunghezza:', result.length);
                fs.writeFileSync('formatted_result.md', result);
                console.log('File formatted_result.md scritto con successo');
              } else {
                console.error('Errore: risposta API non valida');
                fs.writeFileSync('formatted_result.md', '# Errore di formattazione\\n\\nSi è verificato un errore durante la formattazione del testo.');
              }
            } catch (error) {
              console.error('Errore durante la formattazione:', error);
              fs.writeFileSync('formatted_result.md', '# Errore di formattazione\\n\\nSi è verificato un errore durante la formattazione del testo: ' + error.message);
            }
          }
          
          formatText().catch(error => {
            console.error('Errore nel processo principale:', error);
            fs.writeFileSync('formatted_result.md', '# Errore di formattazione\\n\\nSi è verificato un errore durante la formattazione del testo: ' + error.message);
          });
          "
      
      - name: Save result to repository
        id: save_result
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          mkdir -p formatted-results
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          RESULT_FILE="formatted-results/${TIMESTAMP}.md"
          mv formatted_result.md $RESULT_FILE
          git add $RESULT_FILE
          git commit -m "Add formatted markdown result [skip ci]"
          git push
          echo "result_path=${RESULT_FILE}" >> $GITHUB_OUTPUT
          
      - name: Upload result as artifact (legacy)
        uses: actions/upload-artifact@v4
        with:
          name: formatted-markdown
          path: ${{ steps.save_result.outputs.result_path }}