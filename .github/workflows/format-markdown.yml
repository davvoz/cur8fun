permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      text:
        description: 'Testo da formattare'
        required: true
        type: string
      style:
        description: 'Stile di formattazione'
        required: true
        default: 'social'
        type: choice
        options:
          - social
          - technical
          - blog

jobs:
  format:
    runs-on: ubuntu-latest
    outputs:
      result_path: ${{ steps.save_result.outputs.result_path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Format Markdown with GitHub CLI
        id: format
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Crea file con il testo di input
          cat > input.txt << 'EOF'
          ${{ github.event.inputs.text }}
          EOF
          
          # Determina il prompt di sistema in base allo stile
          if [ "${{ github.event.inputs.style }}" = "social" ]; then
            SYSTEM_PROMPT="You are a helpful assistant specialized in Markdown formatting. Format for social media with engaging style."
          elif [ "${{ github.event.inputs.style }}" = "technical" ]; then
            SYSTEM_PROMPT="You are a helpful assistant specialized in Markdown formatting. Format as technical documentation with proper headers and code blocks."
          else
            SYSTEM_PROMPT="You are a helpful assistant specialized in Markdown formatting. Format as a blog post with engaging headings and structure."
          fi
          
          # Formatta il prompt utente con il testo da input.txt
          USER_PROMPT="Transform this text into beautiful, well-formatted Markdown: $(cat input.txt)"
          
          echo "Chiamata API GitHub Models con CLI..."
          
          # Crea un file JSON per la richiesta
          cat > request.json << EOF
          {
            "model": "openai/gpt-4o-mini",
            "messages": [
              {
                "role": "system",
                "content": "$SYSTEM_PROMPT"
              },
              {
                "role": "user",
                "content": "$USER_PROMPT"
              }
            ]
          }
          EOF
          
          # Usa gh CLI con il file JSON come input
          gh api \
            --method POST \
            https://models.github.ai/inference \
            --input request.json > response.json
          
          # Estrai il contenuto della risposta
          cat response.json | jq -r '.choices[0].message.content' > formatted_result.md
          
          # Verifica che il risultato sia stato generato correttamente
          if [ ! -s formatted_result.md ]; then
            echo "ERRORE: Risposta API non valida"
            cat response.json
            echo "# Errore di formattazione" > formatted_result.md
            echo "" >> formatted_result.md
            echo "Si Ã¨ verificato un errore durante la formattazione del testo." >> formatted_result.md
          else
            echo "Formattazione completata con successo!"
          fi
      
      - name: Save result to repository
        id: save_result
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          mkdir -p formatted-results
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          RESULT_FILE="formatted-results/${TIMESTAMP}.md"
          mv formatted_result.md $RESULT_FILE
          git add $RESULT_FILE
          git commit -m "Add formatted markdown result [skip ci]"
          git push
          echo "result_path=${RESULT_FILE}" >> $GITHUB_OUTPUT
          
      - name: Upload result as artifact
        uses: actions/upload-artifact@v4
        with:
          name: formatted-markdown
          path: ${{ steps.save_result.outputs.result_path }}